#+title: Git
#+author: Abhishek Amralkar
#+date: 29-May-2020

* What is Git?

From the official website

 Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

Git is easy to learn and has a tiny footprint with lightning fast performance. It outclasses SCM tools like Subversion, CVS, Perforce, and ClearCase with features like cheap local branching, convenient staging areas, and multiple workflows.

* Getting Started with Git

Install git first. To initiate a empty git repository

#+begin_src emacs-lisp

mkdir your_repo_name && cd your_repo_name

git init

#+end_src


 A git project can be thought of as having three parts:
- A Working Directory: where you’ll be doing all the work: creating, editing, deleting and organizing files
- A Staging Area: where you’ll list changes you make to the working directory
- A Repository: where Git permanently stores those changes as different versions of the project

The Git workflow consists of editing files in the working directory, addin g files to the staging area, and saving changes to a Git repository. In Git, we save changes with a commit, which we will learn more about in this lesson.

*** Status

Below command will give the status of the repository

#+begin_src emacs-lisp

git status

#+end_src

*** Add

To add the files in the Staging area run below command. We can also add multiple files in staging area.

#+begin_src

git add filename/s

#+end_src

*** Diff

Its good practice to see the difference between the file in working directory in repo and the file in staging area

#+begin_src

git diff filename

#+end_src

*** Commit

A commit is the last step in our Git workflow.

The commit command is used to save changes to a local repository after staging in Git. However, before you can save changes in Git,
you have to tell Git which changes you want to save as you might have made tons of edits.
A great way to do that is by adding a commit message to identify your changes.With git commit we need to write a logical, well written commit message, so that the other user/developer can understand the changes
that we are doing are for what and why it was needed.

Please see below link to why we need to write good commit message

[[https://github.com/erlang/otp/wiki/writing-good-commit-messages][Commit Message]]

#+begin_src emacs-lisp

git commit -m "we should always write good commit messages"

#+end_src

*** Logs

With git log we can see the previos commits by all the git repo commiters. Git logs are stored in chronologically in the repository.

#+begin_src emacs-lisp

git log

#+end_src

BTW just in case if you want to see just one liner log

#+begin_src emacs-lisp

git log --oneline

#+end_src

The output of above command will be

 - git commit id which is 40 char long SHA unique string
 - git commit author
 - date and time
 - git message

*** Head

The current commit you are on in your local repository is called as HEAD commit. The below comand gives the details.

#+begin_src emacs-lisp

git show HEAD

#+end_src

*** Checkout

Usually to revert the commit from the Staging area to working directory we use checkout. Checkout is also use to switch between
the various git branches.

#+begin_src emacs-lisp

git checkout HEAD filename

#+end_src

*** Reset

This command will reset the local repository in previous stage like if you had earlier and may remove all the file you added after that
commit.

#+begin_src emacs-lisp

git checkout HEAD filename

#+end_src

We can also do reset from commit too by using the SHA commit id first 7 character

#+begin_src emacs-lisp

git reset aaf9084d5432a09751a9a21acbb70224fe6126de

#+end_src

*** Branch

By default git creates a master branch and its not a good idea to use the git branch as the working branch. rather we can create our
own branch and work in it and later we can raise a review request and get the branch merge in master branch.

To chec the bracnhes for the repositoy

#+begin_src

git branch

#+end_src

usually when we create new branch we always take a base branch which means suppose if we are in master branch and we create our
branch the new brach will have all the files which master branch have exact replica of our master branch at time of our branch creation.

To create a new branch

#+begin_src emacs-lisp

git brach  branchname

#+end_src

To switch to the branch

#+begin_src emacs-lips

git checkout branchname

#+end_src

One liner to create a branch and switch

#+begin_src

git branch -b branchname

#+end_src

Use `git branch` to verify which branch you are in. For current branch Git use `*`.


*** Merge

To merge the changes from some other branch to thr source of truth branch usually master

#+begin_src emacs-lisp

git merge branchname

#+end_src

Make sure the master branch is clean before merging which means all the changes in master branch should be commited else
`git merge` will throw merge conflict error

To resolve the git merge conflict error opent the conflicted file and remove the git markings and add it in stage area and commit to master.

To delete the branch

#+begin_src emacs-lisp

git branch -d branchname

#+end_src

*** Clone

When we want to make a copy of the another repository. We can clone any remote repository if we have access. Remote repositories
can be Public which means full access to clone code is not proprietory and Private where code is secret and not accessible to all.

Remote repository can exist on GitHub, BitBucket, GitLab and many more or on local file path.

#+begin_src emacs-lisp

git clone remore repositorypath

#+end_src

*** Fetch

To update your remote-tracking branches under refs/remotes/<remote>/. It will not integrates the changes into your local repository. Its harmless.
This command will not merge changes from the remote into your local repository. It brings those changes onto what’s called a remote branch.

#+begin_src emacs-lisp

git fetch

#+end_src

*** Cherrypick

Cherry picking in Git means to choose a commit from one branch and apply it onto another.

#+begin_src emacs-lisp

git cherry-pick commit-id

#+end_src
