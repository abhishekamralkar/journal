#+title: Regular Expressions Aka Regex

Regular expressions are a powerful language for matching text patterns. Regular expressions are special sequences of characters that describe a pattern of text that is to be matched.
We can use literals to match the exact characters that we desire

#+begin_src emacs-lisp
 - a, X, 9, <
#+end_src

ordinary characters just match themselves exactly.

The meta-characters which do not match themselves because they have special meanings are:

#+begin_src emacs-lisp
. ^ $ * + ? { [ ] \ | ( )
#+end_src

- . (a period) -- matches any single character except newline '\n'
- \w  -- (lowercase w) matches a "word" character: a letter or digit or underbar [a-zA-Z0-9_]. Note that although "word" is the mnemonic for this, it only matches a single word char, not a whole word.
- \W --(upper case W) matches any non-word character
- \b  -- boundary between word and non-word
- \s  -- (lowercase s) matches a single whitespace character -- space
- \n  -- (lowecase n) matches newline
- \r  -- (lowercase r) matches return
- \t  -- (lowercase t) matches tab
- \S -- (upper case S) matches any non-whitespace character.
- \d -- decimal digit [0-9] (some older regex utilities do not support but \d, but they all support \w and \s)
- ^   --  start
- $   -- end
- \ -- inhibit the "specialness" of a character.
   So, for example, use \. to match a period or \\ to match a slash. If you are unsure if a character has special meaning, such as '@', you can put a slash in front of it, \@, to make sure it is treated just as a character.


Repetition

Things get more interesting when you use + and * to specify repetition in the pattern

#+begin_src emacs-lisp
    + -- 1 or more occurrences of the pattern to its left, e.g. 'i+' = one or more i's
    * -- 0 or more occurrences of the pattern to its left
    ? -- match 0 or 1 occurrences of the pattern to its left
#+end_src
